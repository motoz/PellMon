[plugin_Calculate]
# This plugin implements a simple stack engine. 
# xxx_prog = instruction|value instruction|value... A 'value' pushes the value to the stack, an 'instrucation' pops one or several values and pushes the result back to the stack.
# xxx_readitem = Name of readonly item that executes the calculation and return the top value of the stack when read
# xxx_writeitem = Name of writeonly item that executes the calculation when written. The written value is pushed to the stack so the program can make use of it.
# xxx_readwriteitem = Name of read/write item that executes the calculation when read or written. The written value is pushed to the stack so the program can make use of it, and the top value of the stack is returned when read.
# xxx_taskcycle = execute the calculation periodically with this cycle time in seconds
# xxx_progtype = R|R/W, default is R (read only). An R/W program item can be edited in the web frontend and can be used by other programs as a variable by using get/set

# Available instructions:
# +, -, *, /, get, set, exec, >, <, ==, !=, ?, min, max, pop, dup, swap, sp, def, sto, rcl, del, gdef, gsto, grcl, gdel, str==, str!=, if..then..[else]..end
# 'get' pops an item name, reads the value and pushes the value or 'error'
# 'set' pops an item name and a value, then writes the value to the item name and pushes the result 'OK' or 'error'. ex: "1250 feeder_capacity set"
# ? pops three values, first the value to push back when False, then the value to push back when True, and then the value to evaluate. Ex: "0 123 456 ?" will leave "456" on the stack, while "1 123 456 ?" will leave "123" on the stack
# 'min' pops two values and pushes back the smallest
# 'max' pops two values and pushes back the laragest
# 'exec' pops a calculate item name, gets its value, executes it and pushes the result
# 'pop' discards one value from the stack
# 'dup' duplicates the top value on the stack
# 'swap' swaps the order of the two top values on the stack
# 'sp' pushes the current stack depth, eg zero when the stack is empty
# 'def' pops two values, the first becames the name of a new local variable and the second it's value. If the variable already exists it's value is not changed. 
# 'sto' pops two values, the first is the name of a local variable and the second a value to write to it
# 'rcl' pops one value which identifies a local variable to read and pushes it's value back to the stack
# 'del' pops one value which identifies a local variable to delete
# gdef, gsto, grcl, gdel works exactly as def, sto, rcl, del, except that they handle global variables that persist between program executions and are available to all programs.
# 'str==' pops two values and compares them as strings, returning true if they are equal
# 'str!=' pops two values and compares them as strings, returning true if they are different
# 'if' marks the start of an if..then..[else]..end clause. 'then' pops a value, if it is non-zero, execution is continued until 'else|end'. If 'else' is found execution skips forward until 'end' is found. If 'then' pops a zero from the stack, execution skips forward until 'else|end' is found and then resumes

# example: get boiler temperature divided by two from an item named 'half_boiler_temp'
#calc1_prog = boiler_temp get 2 /
#calc1_readitem = half_boiler_temp
